in general we have transactions and transfers
transaction are in native currencies
transfers are token related

receiverID(e column)
t ignore
u = transactions_receiverID_as_receiver_from_any_sender_before_block_time_first_transaction_date <<<--- first receiving transaction overall for this receiverID
v = transactions_receiverID_as_sender_to_any_receiver_before_block_time_first_transaction_date <<<-- same as above but this id is sender
w = transactions_senderID_as_receiver_and_receiverID_as_sender_before_block_time_first_transaction_date  <<-- time when receiver is sending to senderid in the past ever
x = transactions_senderID_as_sender_and_receiverID_as_receiver_before_block_time_first_transaction_date  <<-- vise versa of w

y, z , aa, ab == same as 4 above but transfers(tokens) 
ac, ad,ae,  same as u,v,w,x but transaction amounts
af, ag,ah,  same as u,v,w,x but transfers amounts 
ai = transactions_receiverID_as_sender_to_any_receiver_before_block_time_tranasctions_count <<--- count of of sending transactions for receiverID before block time(E)
aj = transactions_receiverID_as_sender_to_any_receiver_before_block_time_unique_receivers_count <<--- count of of sending transactions for receiverID before block time(E), unique = unique receiver ids
ak = transactions_receiverID_as_receiver_from_any_sender_before_block_time_tranasctions_count <<-- <<--- count of of receiving transactions for receiverID before block time(E)
al = transactions_receiverID_as_receiver_from_any_sender_before_block_time_unique_senders_count <<--- count of of receiving transactions for receiverID before block time(E), unique = unique receiver ids
am = transactions_senderID_as_sender_and_receiverID_as_receiver_before_block_time_transactions_count <<-- count of received transactions from senderID(column D) before block time
an = transactions_senderID_as_sender_and_receiverID_as_receiver_before_block_time_unique_days_count << same as AM, but unique days
ao = transactions_senderID_as_receiver_and_receiverID_as_sender_before_block_time_transactions_count << same as AM, but sending count
ap = transactions_senderID_as_receiver_and_receiverID_as_sender_before_block_time_unique_days_count < same as ao, but sending unique days
aq, ar, as , at, au, av, aw, ax same as ai - ap, but transfers
ay = total_transactions_count_between_sender_and_receiver_before_block_time , total count of transactions
az = total_transactions_unique_days_count_between_sender_and_receiver_before_block_time, same as above, but count days
ba, bb same as ay, az but transfers 
bc = transfers_first_transfer_date_between_senderID_receiverID_before_block_time, transfer!!! first date senderID -->receiverID and vise versa  
bd = transfers_days_count_between_senderID_and_receiverID_from_first_transfer_date_to_current_transaction_date --> count of days from first transfer to current block time
be = transactions_first_transaction_date_between_senderID_receiverID_before_block_time, same as bc but transaction
bf = transactions_days_count_between_senderID_and_receiverID_from_first_transaction_date_to_current_transaction_date <<-- bd, but transaction
bg = transactions_receiverID_as_sender_to_any_receiver_before_block_time_total_days_std <<<--- receiver sending to anyone total days std!!!, transactions
bh = transactions_any_sender_to_receiverID_as_receiver_before_block_time_total_days_std <<-- any people sending to our receiverID total days std!!!
bi = transfers_any_sender_to_receiverID_as_receiver_before_block_time_total_days_std <<-- same as bh but transfers
bj = transfers_receiverID_as_sender_to_any_receiver_before_block_time_total_days_std <<-- same as bg but transfers
bk = transfers_any_sender_to_receiverID_as_receiver_before_block_time_unique_currency_count <<-- same as bi, but count of unique currency
bl = transfers_receiverID_as_sender_to_any_receiver_before_block_time_unique_currency_count <<-- same as bk but receiveID sending to anyone
bm = transactions_receiverID_as_sender_to_any_receiver_before_block_time_smart_contract_created <<-- if receiverID ever created smart contract
bn = transactions_any_sender_to_receiverID_as_receiver_before_block_time_receiver_annontation <<-- anotations
bo = transfers_any_sender_to_receiverID_as_receiver_before_block_time_receiver_annontation <<-- same as bn but transfers
bp = transfers_sent_or_received_unique_currency_count <<-- count for sent and received for both receiver and senderid
bq = transfers_any_sender_to_receiverID_as_receiver_before_block_time_unique_currency_count.1 <<-- transfers any sender to receiveID, count of unique currencies
br = transfers_receiverID_as_sender_to_any_receiver_before_block_time_unique_currency_count.1 <<--- same as above, receiver sending to anyone
bs = transfers_mixerIDs_as_sender_and_receiverID_as_receiver_before_block_time_first_received_TxHash <<-- txhash of transaction from mixer to receiverID
bt = transfers_mixerIDs_as_receiver_and_receiverID_as_sender_before_block_time_first_sent_TxHash <<-- same as bs but sending to mixer from receiveID
bu = transfers_mixerIDs_as_sender_and_receiverID_as_receiver_before_block_time_first_received_date <<-- same as bs, but date
bv = transfers_mixerIDs_as_receiver_and_receiverID_as_sender_before_block_time_first_sent_date <<-- same as bt but date
bw = transfers_mixerIDs_as_sender_and_receiverID_as_receiver_before_block_time_received_transactions_count <<-- same as bs, but count of transaction received from mixer
bx = transfers_mixerIDs_as_receiver_and_receiverID_as_sender_before_block_time_sent_transactions_count <<-- same as bt, but count of sent tx to mixers
by = transfers_anonymous_activity_from_mixerID_as_sender_to_receiverID_as_receiver_before_block_time <<--- if ever receiver tx from mixer
bz = transfers_anonymous_activity_from_receiverID_as_sender_to_mixerID_as_receiver_before_block_time <<-- same as above ,but sent to mixers
ca = transfers_mixerID_and_receiverID_before_block_time_first_activity_date <<- first time interacted with mixers
cb = transfers_mixerIDs_as_sender_and_receiverID_as_receiver_before_block_time_first_received_amount <<-- how much mixer send to our receiveID
cc = transfers_mixerIDs_as_sender_and_receiverID_as_receiver_before_block_time_first_received_amount_less_equal_to_one <<-- if tx is 0<ETH<1 from anywhere
cd = transfers_receiverID_as_sender_and_mixerIDs_as_receiver_before_block_time_first_sent_amount <<-- how much mixer received from our receiverID
ce, cf, cg, t -- ignore